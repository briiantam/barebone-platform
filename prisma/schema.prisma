generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId //favourite listings

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                       String        @id @default(auto()) @map("_id") @db.ObjectId
  title                    String
  description              String
  imageSrc                 String
  createdAt                DateTime      @default(now())
  category1                String?
  category2                String?
  category3                String?
  startupEBITDA            Int?
  netIncome                Int?
  startupRevenue           Int?
  locationValue            String
  userId                   String        @db.ObjectId
  price                    Int
  startupWebsiteUrl        String?
  valuationExpectations    Int?
  previousFundingRaised    Int?
  lastRoundFundingRaised   Int?
  lastRoundValuation       Int?
  founderOwnership         Int
  employeeCount            Int
  startupDetailedDescription String
  founderFirstName1        String
  founderLastName1         String
  founderRole1             String
  founderLinkedIn1         String?
  founderFirstName2        String?
  founderLastName2         String?
  founderRole2             String?
  founderLinkedIn2         String?
  founderFirstName3        String?
  founderLastName3         String?
  founderRole3             String?
  founderLinkedIn3         String?
  founderFirstName4        String?
  founderLastName4         String?
  founderRole4             String?
  founderLinkedIn4         String?
  preRevenue               Boolean       @default(false)
  user                     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations             Reservation[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId  
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}